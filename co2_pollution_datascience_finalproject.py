# -*- coding: utf-8 -*-
"""CO2_pollution_Datascience_finalproject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QEa-SwVAKOfmzLYAtgaWALnoLg5wc_eZ

#**CO2 POLLUTION DATASETS DATA PREPARATION, GRAPHS AND DATA TRAIN, TEST AND SPLIT**

---



#**Part A: UPLOADING DATASETS TO GOOGLE DRIVE AND TO IMPORT LIBRARIES**

#**Step 1 : Uploading Datasets to Google Drive and import the libraries**
"""

from google.colab import drive
drive.mount('/content/drive')

"""# **Step 2 : Import Libraries**"""



import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import OneHotEncoder

"""
# **Step 3 : Selecting and recording the Datasets. Changing file formats for Google Colab**

"""

# **Path for CO2 Passenger Car Datasets

path_co2_2010 = '/content/drive/MyDrive/DataCO2Total/CO2_2010.csv'
path_co2_2011 = '/content/drive/MyDrive/DataCO2Total/CO2_2011.csv'
path_co2_2012 = '/content/drive/MyDrive/DataCO2Total/CO2_2012.csv'
path_co2_2013_HR = '/content/drive/MyDrive/DataCO2Total/CO2_2013_HR.csv'
path_co2_2013_NO = '/content/drive/MyDrive/DataCO2Total/CO2_2013_NO.csv'
path_co2_2013_V7 = '/content/drive/MyDrive/DataCO2Total/CO2_2013_V7.csv'
path_co2_2014_NO = '/content/drive/MyDrive/DataCO2Total/CO2_2014_NO.csv'
path_co2_2014_V9 = '/content/drive/MyDrive/DataCO2Total/CO2_2014_V9.csv'
path_co2_2015 = '/content/drive/MyDrive/DataCO2Total/CO2_2015.csv'
path_co2_2016 = '/content/drive/MyDrive/DataCO2Total/CO2_2016.csv'
path_co2_2017 = '/content/drive/MyDrive/DataCO2Total/CO2_2017.csv'
path_co2_2018 = '/content/drive/MyDrive/DataCO2Total/CO2_2018.csv'
path_co2_2019 = '/content/drive/MyDrive/CO2_2019.csv'


df_CO2_2010 = pd.read_csv(path_co2_2010,sep='\t', encoding='utf-8', on_bad_lines='skip', low_memory = False)
df_CO2_2011 = pd.read_csv(path_co2_2011,sep='\t', encoding='utf-8', on_bad_lines='skip',low_memory = False)
df_CO2_2012 = pd.read_csv(path_co2_2012,sep='\t', encoding='utf-8', on_bad_lines='skip',low_memory = False)
df_CO2_2013_HR = pd.read_csv(path_co2_2013_HR,sep='\t', encoding='utf-8', on_bad_lines='skip',low_memory = False)
df_CO2_2013_NO = pd.read_csv(path_co2_2013_NO,sep='\t', encoding='utf-8', on_bad_lines='skip',low_memory = False)
df_CO2_2013_V7 = pd.read_csv(path_co2_2013_V7,sep='\t', encoding='utf-8', on_bad_lines='skip',low_memory = False)
df_CO2_2014_NO = pd.read_csv(path_co2_2014_NO,sep='\t', encoding='utf-8', on_bad_lines='skip',low_memory = False)
df_CO2_2014_V9 = pd.read_csv(path_co2_2014_V9,sep='\t', encoding='utf-8', on_bad_lines='skip',low_memory = False)
df_CO2_2015 = pd.read_csv(path_co2_2015,sep='\t', encoding='utf-8', on_bad_lines='skip',low_memory = False)
df_CO2_2016 = pd.read_csv(path_co2_2016,sep='\t', encoding='utf-8', on_bad_lines='skip',low_memory = False)
#df_CO2_2017 = pd.read_csv(path_co2_2017, on_bad_lines='skip',encoding='utf-16le',delimiter=r"\s+", chunksize =1000, low_memory=False)
#df_CO2_2018 = pd.read_csv(path_co2_2018,encoding='latin', on_bad_lines='skip',delimiter=r"\s+", chunksize =1000,low_memory = False)
#df_CO2_2019 = pd.read_csv(path_co2_2019,sep=',',encoding='latin', on_bad_lines='skip', chunksize =1000,low_memory = False)


#Path for CL Datasets


path_cl_2012 = '/content/drive/MyDrive/DataCO2Project/CLFiles/cl_2012.xlsx' # This is the path where the files are located
path_cl_2013 = '/content/drive/MyDrive/DataCO2Project/CLFiles/cl_2013.xlsx' # This is the path where the files are located
path_cl_2014 = '/content/drive/MyDrive/DataCO2Project/CLFiles/cl_2014.xlsx' # This is the path where the files are located


df_cl_2012 = pd.read_excel(path_cl_2012)
df_cl_2013 = pd.read_excel(path_cl_2013)
df_cl_2014 = pd.read_excel(path_cl_2014)


df_cl_2013['Consommation extra-urbaine (l/100km)'].head()



"""# **Step 3b: Working with the 2017 , 2018 and 2019 Dataset**"""

'''
chunk_size = 1000000
batch_no = 1

for chunk in pd.read_csv('/content/drive/MyDrive/DataCO2Total/CO2_2017.csv', on_bad_lines='skip',encoding='utf-16le',delimiter=r"\s+", chunksize =chunk_size, low_memory=False):
  chunk.to_csv('df_CO2_2017' + str(batch_no) + '.csv', index= False)

  batch_no +=1
'''

'''
df = pd.read_csv('/content/df_CO2_20171.csv')

df.info()
'''



"""# **Step 4 : Making security copy files.**"""

#Coping CO2 Datasets security copies

df1 = df_CO2_2010.copy(deep = True)
df2 = df_CO2_2011.copy(deep = True)
df3 = df_CO2_2012.copy(deep = True)
df4 = df_CO2_2013_HR.copy(deep = True)
df5 = df_CO2_2013_NO.copy(deep = True)
df6 = df_CO2_2013_V7.copy(deep = True)
df7 = df_CO2_2014_NO.copy(deep = True)
df8 = df_CO2_2014_V9.copy(deep = True)
df9 = df_CO2_2015.copy(deep = True)
df10 = df_CO2_2016.copy(deep = True)
#df11 = df_CO2_2017 # while this dataset is only a part of the complete one . Chunk function we are going to workit later.
#df12 = df_CO2_2018 # while this dataset is only a part of the complete one . Chunk function we are going to workit later.
#df13 = df_CO2_2019 # while this dataset is only a part of the complete one . Chunk function we are going to workit later.






#Coping CL Datasets security copies

df_cl_1 = df_cl_2012.copy(deep = True)
df_cl_2 = df_cl_2013.copy(deep = True)
df_cl_3 = df_cl_2014.copy(deep = True)

"""#**Part B: DATASETS CO2 and CL PREPARATION I OVERALL PROCEDURES**

#**Step 5: Adding Year Column**
"""

df1['year'] = 2010
df2['year'] = 2011
df3['year'] = 2012
df4['year'] = 2013
df5['year'] = 2013
df6['year'] = 2013
df7['year'] = 2014
df8['year'] = 2014
df9['year'] = 2015
df10['year'] = 2016
#df11['year'] = 2017
#df12['year'] = 2018
#df13['year'] = 2019

df3.head()

df1['CO2_RegNum'] = df1['R']*df1['E (g/km)']
df2['CO2_RegNum'] = df2['r']*df2['e (g/km)']
df3['CO2_RegNum'] = df3['r']*df3['e (g/km)']
df4['CO2_RegNum'] = df4['r']*df4['e (g/km)']
df5['CO2_RegNum'] = df5['r']*df5['e (g/km)']
df6['CO2_RegNum'] = df6['r']*df6['e (g/km)']
df7['CO2_RegNum'] = df7['r']*df7['e (g/km)']
df8['CO2_RegNum'] = df8['r']*df8['e (g/km)']
df9['CO2_RegNum'] = df9['r']*df9['e (g/km)']
df10['CO2_RegNum'] = df10['r']*df10['e (g/km)']
#df11['CO2_RegNum'] = df11['r']*df11['e (g/km)']
#df12['CO2_RegNum'] = df12['r']*df12['e (g/km)']
#df13['CO2_RegNum'] = df13['r']*df13['e (g/km)']

#**To correct field names from Dataset 2010. The categorical column  names must be in uppercase. And we have to create to new fields that in this dataset does not exists.**

"""# **Step 6: To correct field names from Dataset 2010. The categorical column  names must be in uppercase. And we have to create to new fields that in this dataset does not exists.**"""

df1.insert(1,'TAN',1)
df1.insert(1,'ep (KW)',1)

df7.insert(1,'mp',1)


df1.columns = df1.columns.str.lower()
df2.columns = df2.columns.str.lower()
df3.columns = df3.columns.str.lower()
df4.columns = df4.columns.str.lower()
df5.columns = df5.columns.str.lower()
df6.columns = df6.columns.str.lower()
df7.columns = df7.columns.str.lower()
df8.columns = df8.columns.str.lower()
df9.columns = df9.columns.str.lower()
df10.columns = df10.columns.str.lower()

"""#**Step 7 :Normalizing names for every column name for every CO2 Dataset. First create the dictionaries for every table. There are two dictionaries because the 2015 Dataset has different column name for the field IT and and the field Man.Concatenate all the tables from CO2 and called it CO2 Union**"""

tables = [df1,df2,df3,df4,df5,df6,df7,df8,df9,df10]



CO2_union = pd.concat(tables,axis = 0)

CO2_union.isnull().sum().sort_values(ascending = False)*100/len(CO2_union)

#CO2_union.describe()

"""#**Step 8:To describe every column and to stablisch the number of classes for every categorical data**"""

CO2_union.describe(include = 'O')



"""#**Step9:Drop unnecessary columns in CO2 and extract the year in TAN row**"""

#CO2_union = CO2_union.drop(columns=['column_nameA', 'column_nameB'])

#CO2_union['year'] = CO2_union['tan'].iloc[0:4]
#CO2_union = CO2_union[~CO2_union.index.duplicated()]
#CO2_union[CO2_union['tan'].index.duplicated()]
CO2_union = CO2_union.drop(columns=['mms','id','ve','t','va','ve','z (wh/km)','it','er (g/km)','at2 (mm)','cn','mh'])

CO2_union = CO2_union.drop(columns=['tan'])

CO2_union.describe(include = 'O')

CO2_union.describe(include = [np.number])

"""#**Step 10: Change the names from the fields of CO2 Union**"""

Dictionary = {'ms':'Member_state', 'mp':'Manufacturer_pooling',
                   'mh':'Manufacturer_name_EU', 'man':'Manufacturer_name_om',
                   'mms':'Manufacturer_name_ms','tan':'Type_approval_number',
                   't':'Type','va':'Variant','ve':'Version','mk':'Make','cn':'Commercial_name',
                   'ct':'Category_vehicule','r':'Total_new_registration',
                   'e (g/km)':'CO2_emission','m (kg)':'Mass_in_running_kg',
                   'w (mm)':'Wheel_base_mm','at1 (mm)':'Axle_width_steering_axle_mm',
                   'at2 (mm)':'Axle_width_other_axle_mm','ft':'Fuel_type', 'fm':'Fuel_mode',
                   'ec (cm3)':'Engine_capacity_cm3','ep (kw)':'Engine_power_kw',
                   'z (wh/km)':'Electric_energy_consumption_wh_km','it':'Innovative_technology',
                   'er (g/km)':'Emision_reduction_inno_tech_g_km' }



CO2_union = CO2_union.rename(Dictionary, axis =1)

#CO2_union.isnull().sum().sort_values(ascending = False)*100/len(CO2_union)

CO2_union['Manufacturer_pooling'].replace({'nan':'NaN', 'FORD POOL':'Ford', 'JLT POOL':'Jlt', 'SUZUKI POOL':'Suzuki', 'MITSUBISHI POOL':'Mitsubishi',
                                           'DAIMLER AG':'Daimler', 'FORD-WERKE GMBH':'Ford', 'HONDA MOTOR EUROPE LTD':'Honda','SUZUKI':'Suzuki',
                                           'MITSUBISHI MOTORS':'Mitsubishi', 'VW GROUP PC':'Volkswagen', 'POOL RENAULT':'Renault','BMW GROUP':'Bmw',
                                           'FIAT GROUP AUTOMOBILES SPA':'Fiat','TOYOTA -DAIHATSU GROUP':'Toyota', 'GENERAL MOTORS':'Gm','TATA MOTORS LTD':'Tata',
                                           'JAGUAR CARS LTD':'Jaguar','LAND ROVER':'Land Rover','1':'1','na':'NaN','HYUNDAI':'Hyundai', 'KIA':'Kia',
                                           'FCA ITALY SPA':'Fca', 'RENAULT':'Renault','TATA MOTORS LTD':'Tata', 'JAGUAR CARS LTD':'Jaguar','LAND ROVER':'Land Rover',
                                           'TOYOTA-DAHAITSU GROUP':'Toyota','TATA MOTORS LTD, JAGUAR CARS LTD , LAND ROVER':'Several'},inplace = True)

display(CO2_union['Manufacturer_pooling'].unique())

"""# **Step 11: To standarize the categories other classes in the field Fuel_type**"""

CO2_union['Fuel_type'].replace({'Petrol':'Petrol', 'Diesel':'Diesel', 'E85':'E85', 'LPG':'Lpg', 'Electric':'Electric', 'ELECTRIC':'Electric',
       'PETROL-ELECTRIC':'Petrol_Electric', 'DIESEL':'Diesel', 'PETROL':'Petrol', 'NG-biomethane':'NG_Biomethane',
       'Petrol-Electric':'Petrol_Electric', 'Diesel-Electric':'Diesel_Electric', 'nan':'Nan', 'NG-BIOMETHANE':'NG_Biomethane',
       'Hydrogen':'Hydrogen', 'Biodiesel':'Bio_Diesel', 'Diesel-electric':'Diesel_Electric', 'petrol':'Petrol', 'diesel':'Diesel',
       'electric':'Electric', 'petrol-electric':'Petrol_Electric', 'hydrogen':'Hydrogen', 'diesel-electric':'Diesel_Electric',
       'DIESEL-ELECTRIC':'Diesel_Electric', 'Petrol-electric':'Petrol_Electric', 'Petrol-Gas':'Petrol_Gas', 'HYDROGEN':'Hydrogen',
       'BIODIESEL':'Bio_Diesel', 'HYBRID/PETROL/E':'Hybrid_Petrol_E', 'PETROL PHEV':'Petrol_Phev', 'PETROL/ELECTRIC':'Petrol_Electric',
                                'petrol ':'Petrol','PETROL ':'Petrol', 'OTHER':'Other','Diesel/Electric':'Diesel_Electric',
                                'Petrol/Electric':'Petrol_Electric','NG-Biomethane':'NG_Biomethane','NG_biomethane':'NG_Biomethane' },inplace = True) #To normalize the names of the types of Fuel

CO2_union['Fuel_type'].unique()

"""# **Step 12: Substitute all blank values for the mode in Fuel_type Variable.**"""

CO2_union['Fuel_type'] = CO2_union['Fuel_type'].fillna(CO2_union['Fuel_type'].mode()[0])
CO2_union['Fuel_type'].unique()

"""# **Step13: To standarize the categories other classes in the field Fuel_mode**"""

def categorize_fuel_mode(Fuel_type):

    if Fuel_type =='Petrol':

        return 'M'

    elif Fuel_type == 'Diesel':

        return 'M'

    elif Fuel_type == 'E85':
        return 'F'

    elif Fuel_type == 'Lpg':
        return 'M'

    elif Fuel_type == 'Electric':
        return 'E'

    elif  Fuel_type == 'Petrol_Electric':
        return 'P'

    elif  Fuel_type  == 'NG_Biomethane':
        return 'B'

    elif  Fuel_type  == 'Diesel_Electric':
        return 'P'

    elif  Fuel_type  == 'nan':
        return'NaN'

    elif Fuel_type == 'Hydrogen':
        return 'M'

    elif  Fuel_type == 'Bio_Diesel':
        return 'B'

    elif  Fuel_type == 'Petrol_Gas':
        return 'B'

    elif  Fuel_type =='Hybrid_Petrol_E':
        return 'P'

    elif  Fuel_type == 'Petrol_Phev':
        return 'P'

    elif Fuel_type == 'Other':
        return 'Other'

    else:
        return  'M'

CO2_union['Fuel_mode'] = CO2_union['Fuel_type'].apply(categorize_fuel_mode)
CO2_union['Fuel_mode'] = CO2_union['Fuel_mode'].fillna(CO2_union['Fuel_mode'].mode()[0]) # fill blank with mode

CO2_union['Fuel_mode'].value_counts()

"""##**Step 11: Change the values from the column members state with a more meaningfull values for the analysis.**"""

Data1 = ['AT', 'BE', 'BG', 'CY', 'CZ', 'DE', 'DK', 'EE', 'ES', 'FI', 'FR','GB', 'GR', 'HU', 'IE', 'IT', 'LT', 'LU', 'LV', 'MT','M1', 'NL','NO','UK', 'PL','PT', 'RO', 'SE', 'SI', 'HR']


Data2 = ['Austria','Belgium','Bulgary', 'Cyprus', 'Czech Republic', 'Deutschland', 'Denmark', 'Estonia', 'Spain','Finland','France','Great Britain',
         'Greece','Hungary','Ireland','Italy','Lituane','Luxembourg','Latvia','Malta', 'NaN','Netherland','Norway','United Kingdom', 'Poland','Portugal','Romania', 'Sweden','Slovenia','Croatia']

CO2_union['Member_state']= CO2_union['Member_state'].replace(Data1,Data2)

CO2_union.head()

"""#**Step 14 Normalizing names in column Maker**"""

CO2_union['Make'].replace({'BUICK':'Buick', 'CHAMONIX':'Chamonix','CHEVROLET':'Chevrolet','GM CHEVROLET':'Chevrolet','ASTON MARTIN':'Aston Martin','AUDI':'Audi','AUDI AG':'Audi',
                              'CITROEN':'Citroen','PEUGEOT':'Peugeot','PEUGEOT (F)':'Peugeot','LADA':'Lada','BMW':'Bmw','MINI':'Mini','BENTLEY':'Bentley','BUGATTI':'Bugatti',
                              'CATERHAM':'Caterham','CATERHAM CARS':'Caterham','DODGE':'Dodge', 'CHRYSLER':'Chrysler', 'JEEP':'Jeep', 'RENAULT':'Renault', 'DACIA':'Dacia', 'DAIHATSU':'Daihatsu',
                              'SUBARU':'Subaru', 'MERCEDES-BENZ':'Mercedes Benz', 'MERCEDES - BENZ':'Mercedes Benz', 'MERCEDES -BENZ':'Mercedes Benz','MERCDES BENZ':'Mercedes Benz',
                              'MERCEDES BENZ':'Mercedes Benz', 'MERCEDES-AMG':'Mercedes Benz', 'MERCEDES':'Mercedes Benz',
                              'MERCEDES  BENZ':'Mercedes Benz', 'SMART':'Smart', 'MERCEDES BENZ (D)':'Mercedes Benz', 'FERRARI':'Ferrari',
                              'DANGEL':'Dangel', 'FIAT':'Fiat', 'LANCIA':'Lancia', 'ALFA ROMEO':'Alfa Romeo', 'FORD':'Ford',
                              'THE LONDON TAXI COMPANY':'The London Taxi Co', 'CADILLAC':'Cadillac', 'HUMMER':'Hummer',
                              'GENERAL MOTORS -GMC':'General Motors', 'OPEL':'Opel', 'HONDA':'Honda', 'HYUNDAI MOTOR COMPANY':'Hyundai',
                              'HYUNDAI':'Hyundai', 'KIA':'Kia', 'IVECO':'Iveco', 'JAGUAR':'Jaguar', 'KIA MOTORS':'Kia', 'KTM':'Ktm',
                              'LAMBORGHINI':'Lamborghini', 'LAND ROVER':'Land Rover', 'LOTUS':'Lotus', 'SUZUKI':'Suzuki', 'MAHINDRA':'Mahindra',
                              'MASERATI':'Maserati', 'MAZDA':'Mazda', 'MITSUBISHI':'Mitsubishi', 'MITSUBISH':'Mitsubishi', 'MORGAN':'Morgan', 'NISSAN':'Nissan',
                              'INFINITI':'Infiniti', '2667':'2667', 'PORSCHE':'Porsche', 'PROTON':'Proton', 'QUATTRO':'Quattro', 'ROLLS-ROYCE':'Rolls Royce',
                              'SAAB':'Saab', 'SEAT':'Seat', 'SECMA':'Secma', 'SHUANGHUAN':'Shuanghuan', 'SKODA':'Skoda', 'SSANGYONG':'Ssangyong',
                              'TATA':'Tata', 'TOYOTA':'Toyota', 'LEXUS':'Lexus', 'VOLKSWAGEN, VW':'Volkswagen', 'VOLKSWAGEN':'Volkswagen',
                              'VOLKSWAGEN,  VW':'Volkswagen', 'VW':'Volkswagen', 'VOLKSAWGEN, VW':'Volkswagen', 'VOLKSWAGEN - VW':'Volkswagen',
                              'VOLKSWAGEN VW':'Volkswagen', 'VOLVO':'Volvo', 'VOLVO CAR CORPORATION':'Volvo', 'WIESMANN':'Wiesmann', 'nan':'Nan'}, inplace = True)

CO2_union['Make'].replace({'HYUNDAI MOTOR (KOR)':'Hyundai', 'ALFAROMEO':'Alfa Romeo', 'Porsche 2020000':'Porsche',
                               'BENTLEY CO':'Bentley', 'Mercedes-Benz':'Mercedes Benz', 'Mercedes-AMG':'Mercedes Benz', 'Maybach':'Maybach',
                              'MAYBACH':'Maybach', 'smart': 'Smart', 'ALFA':'Alfa Romeo', 'HYUNDAI MOTOR (SK)':'Hyundai', 'HYUNDAI (TR)':'Hyundai',
                              'HYUNDAI MOTOR (CZ)':'Hyundai', 'HYUNDAI MOTOR (IND)':'Hyundai', 'SANTANA':'Santana', 'Jaguar':'Jaguar',
                              'Kia':'Kia', 'KIA MOTOR (ROK)':'Kia', 'KIA MOTORS (ROK)':'Kia', 'KIA MOTORS (SK)':'Kia',
                              'KIA Motors (SK)':'Kia', 'LAMBORGHIN':'Lamborghini', 'COUPE':'Coupe', 'LANDROVER':'Landrover', 'Mazda':'Mazda',
                              'MITSUBISHI (J)':'Mitsubishi', 'MITSUBISHI (NL)':'Mitsubishi', 'VAZ':'Vaz', 'ROLLS ROYCE':'Rolls Royce',
                              'RANGE-ROVER':'Range Rover', 'CITROËN':'Citroen', 'MARTIN MOTORS':'Martin Motors', 'ŠKODA':'Skoda', 'ALPINA':'Alpina',
                              'Bentley':'Bentley', 'Dodge':'Dodge', 'Jeep':'Jeep', 'Chrysler':'Chrysler', 'Ferrari':'Ferrari',
                              'Ford-CNG-Technik':'Ford-Cng-Technik', 'Ford':'Ford', 'Cadillac':'Cadillac', 'Hummer':'Hummer', 'Chevrolet':'Chevrolet',
                              'Chevrolet Daewoo': 'Chevrolet Daewoo', 'Honda':'Honda', 'Hyundai':'Hyundai', 'Jaguar Cars Limited':'Jaguar',
                              'Lamborghini':'Lamborghini', 'Land Rover':'Land Rover', 'Porsche':'Porsche', 'Rolls-Royce':'Rolls Royce', 'Seat':'Seat',
                              'Skoda':'Skoda', 'Ssangyong':'Ssangyong', 'Ssangyong':'Ssangyong', 'Suzuki':'Suzuki', 'Lexus':'Lexus',
                              'VOLKSWAGEN,VW':'Volkswagen', 'Volkswagen-VW':'Volkswagen', 'Volkswagen,VW':'Volkswagen', 'VOLKSWAGEN,':'Volkswagen',
                              'Peugeot':'Peugeot', 'HYUNDAI MOTOR (ROK)':'Hyundai', 'Hyundai Motor (CZ)':'Hyundai', 'Saab':'Saab',
                              'COMARTH':'Comarth', 'FSO':'Fso', 'DAIMLER':'Daimler', 'K.T.M.':'K.t.m.', 'ROVER':'Rover', 'AUSTIN':'Austin',
                              'FIAT-EURA-MOBIL':'Fiat', 'FIAT-BURSTNER':'Fiat', 'ADRIA MOBIL':'Adria', 'ADRIA':'Adria',
                              'FIAT-CARTHAGO':'Fiat', 'FIAT-DETHLEFFS':'Fiat', 'FIAT-KABE':'Fiat', 'FORD-LMC':'Fiat',
                              'ARTEGA':'Artega', 'API CZ':'Api Cz', 'FORD-CNG-TECHNIK':'Ford', 'GMC':'Gmc', 'GUMPERT':'Gumpert',
                              'MERCEDES AMG':'Mercedes Benz', 'VAUXHALL':'Vauxhall', 'GENERAL MOTORS ITALIA':'Gmc', 'PGO':'Pgo',
                              'WESTFIELD':'Westfield', 'Mercedes.Benz':'Mercedes Benz', 'Mercedes Benz':'Mercedes Benz', 'ΑLFA ROMEO':'Alfa Romeo',
                              'SUBARU/IMPREZA':'Subaru Impresa','CHEVROLET GMC BUICK PONTIAC SUZUKI HOLDEN DAEWOO':'Chevrolet GMC...','CHEVROLET GMC HOLDEN DAEWOO':
                              'Chevrolet GMC...','CHEVROLET GMC BUICK PONTIAC SUZUKI DAEWOO HOLDEN':'Chevrolet GMC...','DAEWOO GM DAEWOO CHEVROLET':'Chevrolet GMC...',
                              'DAEWOO GM DAEWOO CHEVROLET CHEVROLET DAEWOO':'Chevrolet GMC...','Chevrolet GMC Buick Pontiac Suzuki Daewoo Holden':'Chevrolet GMC...'}, inplace = True)

CO2_union['Make'].replace({'CHEVROLET GMC BUICK PONTIAC SUZUKI DAEWOO':'Chevrolet GMC...','CHEVROLET,BUICK PONTIAC SUZUKI DAEWOO HOLTEN GMC':'Chevrolet GMC...',
                              'CHEVROLET GMC BUICK PONTIAC HOLDEN DAEWOO':'Chevrolet GMC...','CHEVROLET GMC BUICK PONTIAC HOLDEN DAEWOO SUZUKI':'Chevrolet GMC...',
                              'DAEWOO  BUICK  CHEVROLET PONTIAC SUZUKI HOLDEN GMC':'Chevrolet GMC...', '-':'Nan','JAGUAR CARS LTD':'Jaguar', 'JAGUAR(Jaguar Cars Limited)':'Jaguar',
                              'Automobili Lamborghini SpA':'Lamborgini', 'Lotus':'Lotus', 'Maserati':'Maserati', 'Mitsubishi':'Mitsubishi','NISSAN EUROPE S.A.S.':'Nissan',
                              'OPEL VAUXHALL':'Opel', 'Volvo':'Volvo', 'RAW':'Raw','CHRYSLER JEEP':'Chrysler', 'DAEWOO':'Daewoo', 'MG':'MG', 'PERODUA':'Perodua', 'DR MOTOR COMPANY':'Dr Motor Company',
                              'FIAT ':'Fiat', 'RFMOTO':'Rfmoto', 'PIAGGIO':'Piaggio', 'BERTONE':'Bertone', 'LANCIA ':'Lancia', 'GREAT WALL':'Great Wall','MORGAN MOTOR':'Morgan Motor', 'OMCI':'Omci', 'SHUANGHUAN AUTO':'Shuanghuan Auto', 'FORD (D)':'Ford', 'DONG FENG':'Dong Feng',
                              'ASTON-MARTIN':'Aston Martin', 'LADA-VAZ':'Lada', 'JAGUAR CARS':'Jaguar', 'UAZ':'Uaz', 'LTC':'Ltc', 'SAM':'Sam','MINIMAX':'Minimax', 'DR':'Dr', 'GWM':'Gwm',
                              'BORGWARD':'Borgward', 'LINCOLN':'Lincoln', 'MERCURY':'Mercury','NILSSON':'Nilsson', 'OLDSMOBILE':'Oldsmobile', 'PLYMOUTH':'Plymouth', 'PONTIAC':'Pontiac',
                              'WILLYS/WILLYS-OVERLAND':'Willys Overland', 'RANGE ROVER':'Range Rover', 'TVR':'Tvr', 'OTHER BRITISH':'Other British',
                              'CHEVROLET GMC':'Chevrolet GMC...', 'VOLGA':'Volga', 'ABARTH':'Abarth', 'ford':'Ford', 'HOLDEN':'Holden', 'CORVETTE':'Corvette',
                              'LONDON TAXIS INT.':'The London Taxis Co', 'CARBODIES':'Carbodies', 'RENAULT TRUCKS':'Renault Trucks', 'Make Unknown':'Nan',
                              'MERCEDES-BENZ AG':'Mercedes Benz', 'BINZ':'Binz', 'FORD - CNG-TECHNIK':'Ford','GENERAL MOTORS CORPORATIO':'GM', 'KIA MOTOR':'Kia', 'SSANG YONG':'Ssang Yong', 'Audi':'Audi',
                              'GREYT WALL':'Greyt Wall', 'ALFAROMEOO':'Alfa Romeo', 'CHEVROLETDAEWOOo':'Chevrolet GMC...','JAGUARCARSLIMITEDed':'Jaguar', 'LANDROVERr':'Land Rover', 'VOLKSWAGENVWVW':'Volkswagen',
                              'VOLKSWAGENVW VW':'Volkswagen', 'VOLKSWAGENVWW':'Volkswagen', 'Volkswagen':'Volkswagen', 'Volkswagen, VW':'Volkswagen',
                              'Caterham':'Caterham', 'CACIA':'Cacia', 'DAIHATSU MOTOR COMPANY':'Daihatsu', 'LANCIA,CHRYSLER':'Lancia','Ford-CNG- Technik':'Ford', 'IMPREZA':'Impreza', 'SUBARU/LEGACY':'Subaru Lagacy',
                              'DAEWOO,GMC,PONTIAC,CHEVROLET,HOLDEN,BUICK,SUZUKI':'Chevrolet GMC...','DAEWOO ήBUICK ήCHEVROLETήPONTIACήSUZUKIήHOLDENήGMC':'Chevrolet GMC...','CHEVROLETήGMCήBUICKήPONTIACήHOLDENήDAEWOO':'Chevrolet GMC...',
                              'DAEWOO ήGM DAEWOO ήCHEVROLETήCHEVROLET DAEWOO':'Chevrolet GMC...','CHEVROLETήGMCήBUICKήPONTIACήSUZUKIήDAEWOO':'Chevrolet GMC...','CHEVROLETήGMCήBUICKήPONTIACήSUZUKIήDAEWOOήHOLDEN':'Chevrolet GMC...',
                              'CHEVROLETήGMCήBUICKήPONTIACήSUZUKIήHOLDENήDAEWOO':'Chevrolet GMC...','CHEVROLETήGMCήHOLDENήDAEWOO':'Chevrolet GMC...','CHEVROLETήGMCήHOLDENήBUICKήPONTIAC':'Chevrolet GMC...','CHEVROLEΤήGMCήBUICKήPONTIACήHOLDEN':'Chevrolet GMC...', 'Range Rover':'Range Rover', 'Nissan':'Nissan',
                              'OPEL ή VAUXHALL':'Opel', 'Opel ή Vauxhall':'Opel', 'OPEL Η VAUXHALL':'Opel','VOLKS WAGEN , VW':'Volkswagen', 'VOLKS WAGEN':'Volkswagen', 'VOLKS WAGEN ,VW':'Volkswagen', 'MCLAREN':'Mclaren',
                              'MC LAREN':'Mc Laren', 'Quattro':'Quattro', 'Citroen':'Citroen', 'Lada':'Lada', 'Dacia':'Dacia', 'Smart':'Smart', 'Fiat':'Fiat','Lancia':'Lancia', 'Alfa Romeo':'Alfa Romeo', 'Toyota':'Toyota', 'Subaru':'Subaru', 'Opel':'Opel', 'Renault':'Renault',
                              'FIAT - INNOCENTI':'Fiat', 'LANCIA - AUTOBIANCHI':'Lancia', 'IVECO - FIAT':'Iveco','ISUZU':'Isuzu', 'SCANIA':'Scania', 'SSANGJONG':'Ssang Jong', 'BYD':'Byd', 'LANDWIND':'Landwind', 'MEGANE':'Megane',
                              'ALLIED VEHICLES LTD':'Allied Vehicles LTD', 'GEELY':'Geely', 'ACURA':'Acura', 'HUYNDAI':'Hyundai', 'HIUNDAI':'Hyundai','LAND':'Land', 'LTI VEHICLES':'Lti Vehicles', 'SPORTS TOURE':'Sports Toure', 'RELIANT':'Reliant', 'HAIMA 3':'Haima 3',
                              'MICRO COMPACT CAR SMART':'Smart', 'TRISTAR':'Tristar', 'TRIUMPH':'Triumph', 'INFINITY':'Infinity','RIMOR':'Rimor', 'KNAUS':'Knaus', 'WEINSBERG':'Weinsberg', 'MOBILVETTA':'Mobilvetta', 'GINETTA':'Ginetta', 'AC':'Ac',
                              'X-BOW':'X-Bow', 'SUKIDA':'Sukida', 'JENSEN':'Jensen', 'PENTA':'Penta', 'FISKER AUTOMOTIVE INC.':'Fisker Automitive','SUZUKI (J)':'Suzuki', 'ACHLEITNER':'Achleitner', 'AUTOMOBILI LAMBORGHINI':'Lamborghini',
                              'HYUNDAI MOTOR':'Hyundai', 'VOLKSWAGEN ,VW':'Volkswagen', 'BMW ALPINA':'Bmw', 'ASTONMARTIN':'Aston Martin','BAVARIA':'Bavaria', 'PILOTE':'Pilote', 'kia':'Kia', '79':'79', ' ':'Nan', 'VOLKSWAGEN-VW':'Volkswagen', 'Citroën':'Citroen'}, inplace = True)

CO2_union['Make'].replace({'OMAVALMISTATUD':'Omavalmistatud', '706/2007':'706/2007', 'QUATRO':'Quattro', 'A.U.D.I.':'Audi', 'B.M.W.':'Bmw','FISKER':'Fisker', 'JAGUAR CARS LIMITED':'Jaguar', 'JAGUAR LAND ROVER LIMITED':'Jaguar',
                              'RADICAL SPORTSCARS':'Radical Sportscars', 'Aston Martin':'Aston Martin', 'Mahindra':'Mahindra', 'McLaren':'Maclaren','Mercedes-Amg':'Mercedes Benz', 'OPEN':'Open', 'VOVLO':'Volvo', 'MANITOWE':'Manitowe', 'ROVER CARS':'Rover Cars',
                              'CHRYSLER ':'Chrysler', 'DODGE ':'Dodge', 'MINI ONE D COUNTRYMAN':'Mini One D Country Man','MERCEDES-BENZ/MBPL':'Mercedes Benz', 'DFM':'Dfm', 'DFSK':'Dfsk', 'ALU TRANS SYSTEM':'Alu Trans System', 'CAPRON':'Capron',
                              'FORD/FORD POLSKA':'Ford', 'FORD/GERMAZ':'Ford', 'IVECO/IPL':'Iveco', 'INFINITI/PGD':'Infiniti','FAW XIALI':'Faw Xiali', 'DAF':'Daf', 'ZOTYE':'Zotye', '`ODA':'Oda', 'M':'M', 'AB':'AB', 'SOMAC':'Sonac', 'TRIGANO':'Trigano',
                              'MCLOUIS':'Mclouis', 'EAGLE':'Eagle','CECOMP':'Cecomp','VOLKSWAGEN  COMM':'Volkswagen', 'HUMBER':'Humber', 'MARCOS':'Marcos','SAVIEM':'Saviem', 'AUTOMOBILES PEUGEOT':'Peugeot', 'STRATO':'Strato', 'IBC':'Ibc', 'CHALLENGER':'Challenger',
                              'JAGUAR LAND ROVER':'Land Rover','OPEL Η VAUXHALL ADAM':'Opel', 'DODGE (USA)':'Dodge', 'BMW I':'Bmw', 'DONKERVOORT':'Donkervoort','LAND ROVER LD':'Land Rover', 'MAHINDRA LTD.':'Mahindra', 'MITSUBISHI (THA)':'Mitsubishi', 'PORCHE':'Porsche',
                              'LADA - VAZ':'Lada', 'CRD CAR RESEARCH GMBH':'Crd Car Research', 'VOLKSWAGENVW':'Volkswagen',' OLKSWAGEN VW':'Volkswagen', ' OLKSWAGEN':'Volkswagen', 'ARIEL':'Ariel', 'NOBLE AUTOMOTIVE':'Noble',
                              'OTHER ITALIAN':'Other Italian', 'LANCIA - CHRYSLER':'Lancia', 'Jaguar Land RoverLimited':'Land Rover','Jaguar Land Rover Limited':'Land Rover', 'Jaguar Land Rover':'Land Rover', 'AUDI HUNGARIA':'Audi',
                              'AUTOMOBILES CITROEN':'Citroen', 'AVTOVAZ':'Avtovaz', 'BMW AG':'Bmw', 'BMW GMBH':'Bmw','DAIMLER AG':'Daimler', 'FIAT GROUP':'Fiat', 'FORD WERKE GMBH':'Ford','FUJI HEAVY INDUSTRIES':'Fuji', 'GENERAL MOTORS COMPANY':'Gm', 'GM KOREA':'Gm',
                              'HONDA CHINA':'Honda','0PEL Η VAUXHALL':'Opel', 'HONDA MOTOR CO':'Honda', 'HONDA TURKIYE':'Honda','HONDA UK':'Honda','HYUNDAI ASSAN ':'Hyundai', 'KIA SLOVAKIA':'Kia', 'MAGYAR SUZUKI':'Magyar','MITSUBISHI MOTORS CORPORATION':'Mitsubischi', 'MITSUBISHI MOTORS THAILAND':'Mitsubishi',
                              'SUZUKI MOTOR CORPORATION':'Suzuki', 'FORD - CNG - TECHNIK':'Ford', 'JAGUAR LAND ROVER LTD':'Jaguar', 'DODGE?':'Dodge','LANDROVER ':'Land Rover', 'DONKERVOORT(JD)':'Donkervoort', 'FIAT/PARTNER':'Fiat', 'FORD/IGLOOCAR':'Ford',
                              'CHRVROLET':'Chevrolet', 'OPEL/CARPOL':'Opel', 'TESLA MOTORS':'Tesla','RENAULT/CARPOL':'Renault','RENAULT/GRUAU':'Renault','VOLKSWAGEN/AMZ-KUTNO':'Volkswagen', 'VOLKSWAGEN/ZIMNY':'Volkswagen', 'VOLVO/CARRUS':'Volvo',
                              '\x8aKODA':'Skoda','SICAR':'Sicar', 'QOROS':'Qoros','DETHLEFFS':'Dethleffs','FORD (USA)':'Ford', 'PIRSO':'Pirso','GOLDSCHMITT':'Goldschmitt', 'CATERHAM CARS LTD':'Caterham Cars Ltd', 'LADA AUTOMOBILE GMBH':'Lada', 'IAV':'Iav',
                              'BIERMANN':'Biermann','Mini':'Mini', 'DACIA ':'Dacia','SYLVA':'Sylva','JAGUAR ':'Jaguar','CRD CAR RESEARCH & DEVELOPMENT GMBH & CO KG':'Crd Car Research...', 'SEIKEL':'Seikel', 'LAVERDA':'Laverda',
                              'IVECO-FORD':'Iveco','TAZZARI':'Tazzari','GENERAL MOTORS':'Gm', 'BENYE':'Benye','NOBLE':'Noble','Vauxhall':'Vauxhall','471ROEN':'Citroen', '2ITROEN':'Citroen', 'BMW,MINI':'Bmw', 'ΒMW,MINI':'Bmw', 'ΒMW':'Bmw', 'BMW1MINI':'Bmw',
                              'DACIA AUTOMOBILE SA':'Dacia','HAIDLMAIR':'Haidlmair','GM COACHWORK':'Gm Coachwork', 'MIA':'Mia','0ERCEDES-BENZ':'Mercedes Benz', '270':'270','LANCIA Η CHRYSLER':'Lancia','413T':'413T', 'CHEVROLETΗGMCΗBUICKΗP':'Chevrolet GMC...', 'CHEVROLETΗGMCΗHOLDENΗ':'Chevrolet GMC...',
                              'CHEVROLEΤΗGMCΗBUICKΗP':'Chevrolet GMC...', '1417ROLETΗDAEWOOΗHOLD':'Chevrolet GMC...','CHEVROLETΗDAEWOOΗHOLD':'Chevrolet GMC...', 'CHEVROLEΤ':'Chevrolet', 'CHEVROLEΤΗBUICKΗPONTI':'Chevrolet GMC...',
                              'ΗΥUNDAI':'Hyundai','CHANGHE':'Changhe' ,'FIESTA':'Fiesta','ΗYUNDAI':'Hyundai','FIAT/PZL-MIELEC':'Fiat' ,'JAGUAR (JAGUAR CARS L':'Jaguar','JAGUAR LAND ROVER LIM':'Jaguar', 'JAGUAR LAND ROVERLIMI':'Jaguar', 'ΚIA':'Kia', 'ΑΡZUKI':'Apzuki','3UZUKI':'Suzuki', '405UKI':'Suzuki', 'ΜΑRUTI SUZUKI':'Maruti', 'ΜΑΖDA':'Mazda', 'MITSUBISHI YEN':'Mitsubishi',
                              'ΝISSAN':'Nissan','2ISSAN':'Nissan','CITROEN, DS':'Citroen', '5ISSAN':'Nissan', 'OPEL, VAUXHALL':'Opel','OPEL  VAUXHALL':'Opel','ΟPEL, VAUXHALL':'Opel', ' VAUXHALL':'Opel', '0000, VAUXHALL':'Opel', '0PEL, VAUXHALL':'Opel',
                              'ΟPEL Η VAUXHALL':'Opel','GM':'Gm','MICRO VETT':'Micro Vett','SKODA AUTO S.A.':'Skoda', 'SUZUKI EUR':'Suzuki','ΤOYOTA':'Toyota','05YOTA':'Toyota', 'ΤΟΥΟΤA':'Toyota', 'VOLKSWAGEN AG':'Volkswagen', '1OLKSWAGEN':'Volkswagen', '2OLKSWAGEN,VW':'Volkswagen',
                              'WOLKSWAGEN,VW':'Volkswagen','3OLVO':'Volvo', 'Crd':'Crd', 'AA-NSS':'Aa Nss', 'ALFA-ROMEO':'Alfa Romeo', 'MAZDA 6':'Mazda','PORSCHE 2600000':'Porsche', 'DACIA-OKURA':'Dacia', 'BURSTNER':'Burstner', 'ZERO':'Zero',
                              'AUDI AG (D)':'Audi', 'DS':'Ds','PEUGOT':'Peugeot', 'OPEL / VAUXHALL':'Opel', 'DAICA':'Dacia','VEPB':'Vepb', 'MERCDEDES-BENZ':'Mercedes Benz', 'KIVI':'Kivi','RADICAL':'Radical', 'ELNAGH':'Elnagh', 'WESTFALIA':'Westfalia', 'GREAT WALL MOTOR':'Great Wall Motor',
                              'PGO AUTOMOBILES':'PGO Automobiles','GERMAN E CARS':'German Cars','RADICAL MOTORSPORT':'Radical Motorsport', 'Volkswagen VW':'Volkswagen','JAGUAR LAND ROVER LIMIT':'Jaguar', 'PAGANI':'Pagani', '05TROEN':'Citroen', 'CITROEN':'Citroen', 'DS':'Ds',
                              '00000EN':'Citroen','TAIQI':'Taiqui', 'VEICOLI':'Veicoli','46 ΤΟΥΟΤΑ':'Toyota','18002EN':'Citroen', '1EUGEOT':'Peugeot', '34 PEUGEOT':'Peugeot', 'PUGEOT':'Peugeot', '5721531':'Peugeot','3 BMW':'Bmw', '3INI':'Mini', '5011501I':'Peugeot', 'ΜINI':'Mini', 'ΜERCEDES-BENZ':'Mercedes Benz',
                              'ΜΕRCEDES-BENZ':'Mercedes Benz','BLUECAR':'Bluecar', '4091407':'Mercedes Benz', '1525':'Mercedes Benz', '4921481':'Mercedes Benz','CHEVROLETΗBUICKΗPONTI':'Chevrolet GMC...', 'HONDA EUR':'Honda', '1YUNDAI':'Hyundai',
                              'JANGUAR LAND ROVER LI':'Land Rover', 'ΝΑΙUKI':'Naiuki', 'MAGYAR':'Magyar', 'SUSUKI':'Suzuki', '15251523':'Suzuki','ΝΙSSAN':'Nissan', '3ISSAN':'Nissan', '5601560':'Nissan', 'OPEL,':'Opel', '472L, VAUXHALL':'Opel',
                              '2PEL, VAUXHALL':'Opel','SHENZHEN BYD AUTO':'Byd','050L':'050l','MICRO-VETT':'Micro Vett','VAUXHALL':'Opel', 'ΟPEL':'Opel', 'OPEL Η VAUXHALL AG':'Opel','5011505':'Opel', '2KODA':'Skoda', '1KODA':'Skoda', 'SUZUKI MOTOR':'Suzuki', '1UZUKI':'Suzuki', 'ΤΟYOTA':'Toyota',
                              'ΤΟΥOTA':'Toyota', 'ΟΥΣΙ A':'Toyota', '1OYOTA':'Toyota','BMWI':'Bmw','ΤΟΥΟΤΑ':'Toyota', 'WOLKSWAGEN':'Volkswagen', '4411434GEN':'Volkswagen','VOLKSVAGEN':'Volkswagen', 'VOGKSWAGEN':'Volkswagen', 'VOLKSWAGEN,VW  AG':'Volkswagen', '0000000000,VW':'Volkswagen',
                              'CITROEN-DS':'Citroen', 'MECEDES-BENZ':'Mercedes Benz','FORD-CNG TECHNIK':'Ford', 'VOKSWAGEN VW':'Volkswagen','KOENIGSEGG':'Koenigsegg', 'SSANGY0NG':'Ssangyong', 'SUBURU':'Subaru', 'OCKELBO':'Ockelbo', 'DODGE FIAT':'Dodge','MARUTI':'Maruti','CITROEN,DS':'Citroen','HYUNDAI ':'Hyundai','HOECKMAYR':'Hoeckmayr',
                              'DODGE  (USA)':'Dodge','THINK':'Think','MG':'Mg','MERCEDES-AMG GMBH':'Mercedes Benz','RENAULT TECH':'Renault', 'ÖVRIGA':'Ovriga','CITOREN':'Citroen','LITEX MOTORS':'Litex Motors', 'GIANTCO':'Giantco', 'FOCUS':'Focus', 'MAHINDRA (INDIEN)':'Mahindra','VW - VOLKSWAGEN':'Volkswagen', 'MPM MOTORS':'Mpm', 'HYUNDAI GENESIS':'Hyundai', 'JEPP':'Jeep',
                              'VOLKSWAGEN  VW':'Volkswagen', 'ΒMWI':'Bmw' ,'MITSUBISHI (THA':'Mitsubischi', 'TESLA':'Tesla','PIAGGIO (I)':'Piaggio', 'ULTIMA':'Ultima', 'B R M':'Brm'}, inplace =True)

CO2_union['Make'].unique()





"""#**Step 15 :Normalizing names for every column name for every CL Dataset. First create the dictionaries for every table. Concatenate all CL tables in CL_Union**"""

Dictionary_2012 = {'lib_mrq':'brand', 'lib_mod_doss':'Model_file', 'lib_mod':'Model_UTAC',
                   'dscom':'Commercial_name', 'cnit':'Code_National_Identification_Type',
                   'tvv':'Type_Variante_Version(TVV)','typ_cbr':'fuel_type',
                   'hybride':'Hybride','puiss_admin_98':'Administrative_power','puiss_max':'power_maximal (kW)','typ_boite_nb_rapp':'Gearbox',
                   'conso_urb':'Urban_consumption (l/100km)',
                   'conso_exurb':'Extra_urban_consumption(l/100km)','conso_mixte':'Consumption_mix(l/100km)',
                   'co2':'CO2','co_typ_1':'CO_type_I (g/km)',
                   'hc':'hc','nox':'nox',
                   'hcnox':'hcnox','ptcl':'Particles', 'masse_ordma_min':'Empty_mass_min(kg)',
                   'masse_ordma_max':'Empty_mass_max(kg)',
                   'champ_v9':'Champ_V9','date_maj':'Missing_data','Carosserie':'Carosserie',
                   'gamme':'range'}


Dictionary_2013 = {'Marque':'brand','Modèle dossier':'Model_file', 'Modèle UTAC':'Model_UTAC',
                   'Désignation commerciale':'Commercial_name', 'CNIT':'Code_National_Identification_Type',
                   ' Type Variante Version (TVV)':'Type_Variante_Version(TVV)','Carburant':'fuel_type',
                   'Hybride':'Hybride',' Puissance administrative':'Administrative_power','Puissance maximale (kW)':'power_maximal (kW)','Boîte de vitesse':'Gearbox',
                   'Consommation urbaine (l/100km)':'Urban_consumption (l/100km)',
                   'Consommation extra-urbaine (l/100km)':'Extra_urban_consumption(l/100km)','Consommation mixte (l/100km)':'Consumption_mix(l/100km)',
                   'CO2 (g/km)':'CO2','CO type I (g/km)':'CO_type_I (g/km)',
                   'hc':'hc','nox':'nox',
                   'hcnox':'hcnox','Particules (g/km)':'Particles', 'masse vide euro min (kg)':'Empty_mass_min(kg)',
                   'masse vide euro max (kg)':'Empty_mass_max(kg)',
                   'Champ V9':'Champ_V9','Date de mise à jour ':'Missing_data','Carosserie':'Carosserie',
                   'gamme':'range'}





Dictionary_2014 = {'lib_mrq':'brand','lib_mod_doss':'Model_file', 'lib_mod':'Model_UTAC',
                   'dscom':'Commercial_name', 'cnit':'Code_National_Identification_Type',
                   'tvv':'Type_Variante_Version(TVV)','cod_cbr':'fuel_type',
                   'hybride':'Hybride','puiss_admin_98':'Administrative_power','puiss_max':'power_maximal (kW)','typ_boite_nb_rapp':'Gearbox',
                   'conso_urb':'Urban_consumption (l/100km)',
                   'conso_exurb':'Extra_urban_consumption(l/100km)','conso_mixte':'Consumption_mix(l/100km)',
                   'co2':'CO2','co_typ_1':'CO_type_I (g/km)',
                   'hc':'hc','nox':'nox',
                   'hcnox':'hcnox','ptcl':'Particles', 'masse_ordma_min':'Empty_mass_min(kg)',
                   'masse_ordma_max':'Empty_mass_max(kg)',
                   'champ_v9':'Champ_V9','date_maj':'Missing_data','Carosserie':'Carosserie',
                   'gamme':'range'}


df_cl_1 = df_cl_1.rename(Dictionary_2012, axis = 1)
df_cl_2 = df_cl_2.rename(Dictionary_2013, axis = 1)
df_cl_3 = df_cl_3.rename(Dictionary_2014, axis = 1)

"""# **Part C: DATASETS CO2 and CL CONCATENATION I OVERALL PROCEDURES**

#**Step 16:Concatenate all the tables from CL and called it CL Union**#
"""

cl_union = pd.concat([df_cl_1,df_cl_2,df_cl_3], axis = 0) #Table that represents the total data from 2012 to 2014



cl_union.isnull().sum().sort_values(ascending = False)*100/len(cl_union)

cl_union.info()



"""# **Part D: DATASETS CO2 and CL DATA CLEANING**

# **Step 17: Cleaning the Data From Column HCnox CL Union**
"""

df = cl_union

def fill_missing_values(df, col_hc, col_nox, col_hcnox):
    # calculation of missing values in 'hcnox'
    mask_hcnox = pd.isna(df[col_hcnox]) & pd.notna(df[col_hc]) & pd.notna(df[col_nox])
    df.loc[mask_hcnox, col_hcnox] = df.loc[mask_hcnox, col_hc] + df.loc[mask_hcnox, col_nox]

   # calculation of missing values in 'hc'
    mask_hc = pd.isna(df[col_hc]) & pd.notna(df[col_nox]) & pd.notna(df[col_hcnox])
    df.loc[mask_hc, col_hc] = df.loc[mask_hc, col_hcnox] - df.loc[mask_hc, col_nox]

     # calculation of missing values in 'nox'
    mask_nox = pd.isna(df[col_nox]) & pd.notna(df[col_hc]) & pd.notna(df[col_hcnox])
    df.loc[mask_nox, col_nox] = df.loc[mask_nox, col_hcnox] - df.loc[mask_nox, col_hc]


fill_missing_values(cl_union, 'hc', 'nox', 'hcnox')


print(cl_union[['hc', 'nox', 'hcnox']])

mean_particles = cl_union['Particles'].mean()

# Display the mean of the 'particles' column
print(f"Mean of the 'Particles (g/km)' column: {mean_particles}")

"""#**Step18: Cleaning Missing values Particles CL Union**"""

# Replace missing values in the 'particles' column with the calculated mean
cl_union['Particles'].fillna(mean_particles, inplace=True)

# Display the DataFrame to ensure missing values are filled
print("DataFrame after filling missing values in the 'Particles (g/km)' column:")
print(cl_union[['Particles']])



"""# **Step18b: Cleaning Missing values CO2 Dataset and Filtering**"""

CO2_union.drop_duplicates(subset=None, keep="first", inplace=True) # Drop duplicates.

# 1) Fill the Nan with the Mode

CO2_union['Fuel_mode'] = CO2_union['Fuel_mode'].fillna(CO2_union['Fuel_mode'].mode()[0]) # fill blank with mode
# Here we filled the NaN with the Mode
CO2_union['Mass_in_running_kg'] = CO2_union['Mass_in_running_kg'].fillna(CO2_union['Mass_in_running_kg'].mode()[0]) # mode, mean, median,min,max
# Here we filled the NaN with the Mode
CO2_union['Wheel_base_mm'] = CO2_union['Wheel_base_mm'].fillna(CO2_union['Wheel_base_mm'].mode()[0]) # mode, mean, median,min,max
CO2_union['CO2_emission'] = CO2_union['CO2_emission'].fillna(CO2_union['CO2_emission'].median()) # mode, mean, median,min,max

# 2) Fill the Nan with the Mean

CO2_union['Mass_in_running_kg'] = CO2_union['Mass_in_running_kg'].fillna(CO2_union['Mass_in_running_kg'].mean()) # mode, mean, median,min,max
CO2_union['Wheel_base_mm'] = CO2_union['Wheel_base_mm'].fillna(CO2_union['Wheel_base_mm'].mean()) # mode, mean, median,min,max
CO2_union['Axle_width_steering_axle_mm'] = CO2_union['Axle_width_steering_axle_mm'].fillna(CO2_union['Axle_width_steering_axle_mm'].mean()) # mode, mean, median,min,max

CO2_union['Engine_capacity_cm3'] = CO2_union['Engine_capacity_cm3'].fillna(CO2_union['Engine_capacity_cm3'].mean()) # mode, mean, median,min,max
CO2_union['Engine_power_kw'] = CO2_union['Engine_power_kw'].fillna(CO2_union['Engine_power_kw'].mean()) # mode, mean, median,min,max

# 3) Filter CO2_union with are going to work with only the cars from the category M

CO2_union = CO2_union[CO2_union['Category_vehicule'] != 'M1G'] # Only category M
CO2_union = CO2_union[CO2_union['Category_vehicule'] != 'N1G']
CO2_union = CO2_union[CO2_union['Category_vehicule'] != 'N1']
CO2_union = CO2_union[CO2_union['Category_vehicule'] != 'nan']
CO2_union = CO2_union[CO2_union['Category_vehicule'] != 'M1']

CO2_union['Category_vehicule'] = CO2_union['Category_vehicule'].fillna(CO2_union['Category_vehicule'].mode()[0]) # mode, mean, median,min,max

fuel_type_col = 'Fuel_type'

CO2_union = CO2_union[CO2_union[fuel_type_col] != 'Electric']  # All the electric carburant are filtered
CO2_union= CO2_union[CO2_union[fuel_type_col] != 'Petrol_Electric']
CO2_union = CO2_union[CO2_union[fuel_type_col] != 'Diesel_Electric']
CO2_union = CO2_union[CO2_union[fuel_type_col] != 'Hybrid_Petrol_E']

# 4) All the vehicules below 75 gr/km and beyond 240 gr/km will be filtered from CO2_union

CO2_union = CO2_union[(CO2_union['CO2_emission'] >=80) & (CO2_union['CO2_emission']<=220)]

# 5) Engine Capacity Filtering

'Engine_capacity_cm3'

CO2_union = CO2_union[(CO2_union['Engine_capacity_cm3'] >=1700) & (CO2_union['Engine_capacity_cm3']<=2100)]

# 6) Mass in running KG Filtering

CO2_union = CO2_union[(CO2_union['Mass_in_running_kg'] >=900) & (CO2_union['Mass_in_running_kg']<=2000)]

sns.heatmap(pd.crosstab(CO2_union['Fuel_type'], CO2_union['Fuel_mode'],margins=True, margins_name= 'Totals',normalize = True, dropna = False),cmap="YlGnBu", annot=True, cbar=True);
plt.title('Fuel Type versus Fuel Mode for Autos -Normalize Data-');
plt.xlabel('Fuel Mode');
plt.ylabel('Fuel Type');

"""# **Step 19 : Exploratory Graphics from Datasets CL Union.**"""

filtered_df = cl_union[['brand', 'Model_file', 'Model_UTAC', 'Commercial_name', 'CO2']].dropna(subset=['CO2'])

# Sort the data by CO2 emissions in descending order and take the top 20
top_cars = filtered_df.sort_values(by='CO2', ascending=False).head(20)

# Combine brand and commercial name for better labels
top_cars['Car'] = top_cars['brand'] + " " + top_cars['Commercial_name']

# Create a horizontal bar plot of CO2 emissions by car model
plt.figure(figsize=(12, 8))
plt.barh(top_cars['Car'], top_cars['CO2'], color='skyblue')
plt.xlabel('CO2 Emissions (g/km)')
plt.ylabel('Car Model')
plt.title('Top 20 Cars with Highest CO2 Emissions')
plt.gca().invert_yaxis()  # Invert y-axis to have the highest CO2 emissions at the top

# Highlight the car with the highest CO2 emissions
max_co2 = top_cars['CO2'].max()
max_co2_car = top_cars[top_cars['CO2'] == max_co2]['Car'].values[0]
plt.barh(max_co2_car, max_co2, color='red')

# Show the plot
plt.tight_layout()
plt.show()

print("Column names and data types in the DataFrame:")
print(cl_union.dtypes)

co2_col = 'CO2'  # Replace with the correct column name for CO2
# Let's assume the correct column name for consumption mix is something like 'Consumption_mix_l_per_100km'
consumption_col ='Consumption_mix(l/100km)'  # Replace with the correct column name for consumption mix

# Convert relevant columns to numerical types if they are not already
cl_union[co2_col] = pd.to_numeric(cl_union[co2_col], errors='coerce')
cl_union[consumption_col] = pd.to_numeric(cl_union[consumption_col], errors='coerce')

# Select relevant variables and drop rows with missing values in any of the important columns
filtered_df = cl_union[['brand', 'Model_file', 'Commercial_name', co2_col, consumption_col]].dropna(subset=[co2_col, consumption_col])

# Combine brand and commercial name for better labels
filtered_df['Car'] = filtered_df['brand'] + " " + filtered_df['Commercial_name']

# Create a scatter plot
plt.figure(figsize=(12, 8))

# Scatter plot for CO2 vs. Consumption_mix
scatter = plt.scatter(
    filtered_df[co2_col],
    filtered_df[consumption_col],
    alpha=0.6,
    c=filtered_df[consumption_col],  # Color by Consumption_mix for additional dimension
    cmap='viridis'
)

plt.colorbar(scatter, label='Consumption Mix (l/100km)' )
plt.xlabel('CO2 Emissions (g/km)')
plt.ylabel('Consumption_mix (l/100km)' )
plt.title('Scatter Plot of CO2 Emissions and Consumption Mix')

# Highlight the car with the highest CO2 emissions
max_co2 = filtered_df[co2_col].max()
max_co2_car = filtered_df[filtered_df[co2_col] == max_co2]
plt.scatter(max_co2_car[co2_col], max_co2_car[consumption_col], color='red', edgecolor='black', label='Highest CO2 Emitter')

# Add legend
plt.legend(loc='upper right')

# Show the plot
plt.tight_layout()
plt.show()

# Correct column names based on the provided variables
columns = ['brand', 'Model_file', 'Model_UTAC', 'Commercial_name', 'Code_National_Identification_Type',
    'Type_Variante_Version(TVV)', 'fuel_type', 'Hybride', 'Administrative_power', 'power_maximal (kW)',
    'Gearbox', 'Urban_consumption (l/100km)', 'Extra_urban_consumption(l/100km)', 'Consumption_mix(l/100km)',
    'CO2', 'CO_type_I (g/km)', 'Hydrocarbon', 'nitrogen oxides', 'hydrocarbon and nitrogen oxides',
    'Particles (g/km)', 'Empty_mass_min(kg)', 'Empty_mass_max(kg)', 'Champ_V9', 'Missing_data',
    'Carrosserie', 'range']

# Ensure the columns exist in the DataFrame
columns = [col for col in columns if col in cl_union.columns]

# Select relevant variables and drop rows with missing CO2 values
filtered_df = cl_union[columns].dropna(subset=['CO2'])

# Ensure no duplicate columns exist in filtered_df
assert filtered_df.columns.duplicated().sum() == 0, "There are still duplicate columns in filtered_df"

filtered_df = filtered_df.reset_index() # Julio Mella code

# Step 1: Identify the car that emits the most CO2 emissions
max_co2 = filtered_df['CO2'].max()
max_co2_car = filtered_df[filtered_df['CO2'] == max_co2]

print("Car with the highest CO2 emissions:")
print(max_co2_car[['brand', 'Model_file', 'Commercial_name', 'CO2']])

# Step 2: Analyze correlations between CO2 emissions and other numerical variables
numerical_columns = ['CO2', 'Administrative_power', 'power_maximal (kW)', 'Urban_consumption (l/100km)',
    'Extra_urban_consumption(l/100km)', 'Consumption_mix(l/100km)', 'CO_type_I (g/km)',
    'Hydrocarbon', 'nitrogen oxides', 'hydrocarbon and nitrogen oxides', 'Particles (g/km)',
    'Empty_mass_min(kg)', 'Empty_mass_max(kg)', 'range']

# Ensure the numerical columns exist in the DataFrame
numerical_columns = [col for col in numerical_columns if col in filtered_df.columns]

# Step 3: Create a scatter plot matrix to visualize relationships between CO2 and other variables
sns.pairplot(filtered_df[numerical_columns])
plt.suptitle('Scatter Plot Matrix of CO2 and Related Variables', y=1.02)
plt.show()

# Create a heatmap to visualize the correlation matrix
correlation_matrix = filtered_df[numerical_columns].corr()

plt.figure(figsize=(14, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix with CO2 Emissions')
plt.show()

# Print the correlation matrix to identify the variables that correlate the most with CO2 emissions
print("Correlation matrix with CO2 emissions:")
print(correlation_matrix['CO2'].sort_values(ascending=False))

# Reset the index of filtered_df to ensure unique index values
filtered_df = filtered_df.reset_index(drop=True)

# Step 3: Create a scatter plot matrix to visualize relationships between CO2 and other variables
sns.pairplot(filtered_df[numerical_columns])
plt.suptitle('Scatter Plot Matrix of CO2 and Related Variables', y=1.02)
plt.show()

# Assuming cl_union is the DataFrame that already contains your combined data

# Print the first few rows to verify the data
print("First few rows of the DataFrame:")
print(cl_union.head())

# Print the data types of all columns to identify any datetime columns
print("Data types of columns:")
print(cl_union.dtypes)

# Identify and print duplicate columns
duplicate_columns = cl_union.columns[cl_union.columns.duplicated()].unique()
print("Duplicate columns:", duplicate_columns)

# Remove duplicate columns
cl_union = cl_union.loc[:, ~cl_union.columns.duplicated()]

# Verify columns are unique
assert cl_union.columns.duplicated().sum() == 0, "There are still duplicate columns"

# Print columns to verify duplicates are removed
print("Columns after removing duplicates:")
print(cl_union.columns)







"""#**Step 20: Create new variable ' Type_variante_Version(TVV)' that will be the joint for merge the CO2 and CL Datasets.**"""

#CO2_union['Type_Variante_Version(TVV)'] = CO2_union['Type'] + CO2_union['Variant'] + CO2_union['Version']
#CO2_union['Type_Variante_Version(TVV)'].tail()

"""#**Step 21: Merge CO2 and CL Datasets in one called CO2_CL_Union.**"""

#CO2_CL_Union = pd.merge(CO2_union,cl_union, how = 'left')

#CO2_CL_Union.info()

"""# **Step 22: Fuel Type versus Fuel Mode for Autos - Normalize Data -**"""

sns.heatmap(pd.crosstab(CO2_union['Fuel_type'], CO2_union['Fuel_mode'],margins=True, margins_name= 'Totals',normalize = True, dropna = False),cmap="YlGnBu", annot=True, cbar=True);
plt.title('Fuel Type versus Fuel Mode for Autos -Normalize Data-');
plt.xlabel('Fuel Mode');
plt.ylabel('Fuel Type');

"""#**Step 23: Relationship between the fuel type from CO2 and Cl**"""

#typefuelcomp = CO2_CL_Union[['Fuel_type','fuel_type','Fuel_mode']]

#typefuelcomp.groupby(['fuel_type','Fuel_type']).count()

"""# **Step 24: Filter and Graphics all the Autos that runs on electric engine**"""

# **Take out all the Autos that run on Electric motors**

FilterElectric = CO2_union[(CO2_union['Fuel_type'] == 'Electric') | (CO2_union['Fuel_type'] == 'Petrol_Electric')| (CO2_union['Fuel_type'] == 'Diesel_Electric')].index
CO2_union.drop(FilterElectric, inplace=True)
CO2_union['Fuel_type'].unique()

"""# **Step 25: Exploratory Graphics from the CO2 Datasets**"""

#**Variable CO2 Emission Analisis**

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns

fig, axes = plt.subplots(nrows = 1, ncols = 2, figsize = (10,6))

sns.histplot(CO2_union['CO2_emission'], bins = 20, kde = True, ax =axes[0]);
axes[0].set_title('CO2 emmission per Auto');
axes[0].set_xlabel('CO2 gr/Km ');
axes[0].set_ylabel('Distribution');


sns.boxplot(CO2_union['CO2_emission'], ax= axes[1]);
axes[1].set_title('CO2 emmission per Auto');
axes[1].set_xlabel('Frecuency ');
axes[1].set_ylabel('Distribution');


plt.tight_layout();
plt.show();

#** Fuel Type Analysis Catplot**

plt.figure(figsize= (10,25));
sns.set_style('ticks');
sns.catplot(CO2_union['Fuel_type'],kind = 'bar',color = 'orange');
plt.xlim(0, 300000);
plt.title('Fuel Type for Autos');
plt.xlabel('Frecuency');
plt.ylabel('Fuel Type');
plt.show();

# ** Mass in Running Order M  Categorical Values

CO2_union_quantitative_columns = ['CO2_emision','Mass_in_running_kg','Wheel_base_mm','Axle_width_steering_axle_mm','Engine_capacity_cm3','Engine_power_kw']



# We analyze the results
fig, axes = plt.subplots(nrows = 1, ncols = 2, figsize = (10,6))

sns.histplot(CO2_union['Mass_in_running_kg'], bins = 20, kde = True, ax =axes[0]);
axes[0].set_title('Mass in running Kg');
axes[0].set_xlabel('Mass Kg ');
axes[0].set_ylabel('Distribution');


sns.boxplot(CO2_union['Mass_in_running_kg'], ax= axes[1]);
axes[1].set_title('Mass in running Kg');
axes[1].set_xlabel('Mass Kg ');
axes[1].set_ylabel('Distribution');


plt.tight_layout();
plt.show();

# Wheel Base mm Analisis

CO2_union['Wheel_base_mm'].describe()

# We analyze the results
fig, axes = plt.subplots(nrows = 1, ncols = 2, figsize = (10,6))

sns.histplot(CO2_union['Wheel_base_mm'], bins = 3, kde = True, ax =axes[0]);
axes[0].set_title('Wheel Base mm');
axes[0].set_xlabel('Wheel Base ');
axes[0].set_ylabel('Distribution');


sns.boxplot(CO2_union['Wheel_base_mm'], ax= axes[1]);
axes[1].set_title('Wheel Base mm');
axes[1].set_xlabel('Wheel Base');
axes[1].set_ylabel('Distribution');


plt.tight_layout();
plt.show();

CO2_union.groupby(['year', 'Member_state'])['CO2_emission'].agg(['sum', 'mean', 'count'])

"""'''

Environmental Analysis
While the target value for PCs declines from 130 g CO2/km in 2015 to 95 g CO2/km
by the end of 2020, the target for LCVs goes down from 175 g CO2/km in 2017 to 147 g CO2/km by 2020.


https://climate.ec.europa.eu/eu-action/transport/road-transport-reducing-co2-emissions-vehicles/co2-emission-performance-standards-cars-and-vans_en

With stricter CO2 emission targets in place since 2020, the average
CO2 emissions from all new passenger cars registered in Europe fell
by 27% between 2019 and 2022,


2025 to 2034

The targets that will apply from 2025 onwards are based on the WLTP (Worldwide harmonized Light vehicles Test Procedure) and were set out in Commission Implementing Decision (EU) 2023/1623:

Cars:  93,6 g CO2/km (2025-2029) and 49,5 g CO2/km (2030-2034)
Vans: 153,9 g CO2/km (2025-2029) and 90,6 g CO2/km (2030-2034)# Neuer Abschnitt

# **Step 26: Graphics**
"""

CO2_union['CO2_emission'].head()


df = CO2_union['CO2_emission']

CO2_union['Level_emission']= pd.cut(df, bins=[0,150,200], include_lowest=False,labels=['On Target', 'Not On Target']);

emissions = pd.Series(CO2_union['Level_emission']).value_counts();
Brand = pd.Series(CO2_union['Make']).value_counts();

plt.figure(figsize = (5,5));
sns.barplot( y = emissions.values, x = emissions.index, label = ' Emission Categories ');
plt.legend();
plt.xlabel(' Level of Emission');
plt.ylabel(' Frecuency');
plt.show();

# Correct column names based on the provided variables

fuel_type_col = 'Fuel_type'


columns = ['Member_state', 'Manufacturer_pooling','Manufacturer_name_EU','Manufacturer_name_om',
                   'Manufacturer_name_ms','Type_approval_number','Type','Variant','Version','Make','Commercial_name',
                   'Category_vehicule','Total_new_registration','CO2_emission','Mass_in_running_kg','Wheel_base_mm',
                   'Axle_width_steering_axle_mm','Axle_width_other_axle_mm','Fuel_type','Fuel_mode','Engine_capacity_cm3',
                   'Engine_power_kw']



# Ensure the columns exist in the DataFrame
columns = [col for col in columns if col in CO2_union.columns]

# Select relevant variables and drop rows with missing CO2 values
filtered_df = CO2_union[columns].dropna(subset=['CO2_emission'])

# Ensure no duplicate columns exist in filtered_df
assert filtered_df.columns.duplicated().sum() == 0, "There are still duplicate columns in filtered_df"

filtered_df = filtered_df.reset_index() # Julio Mella code

# Step 1: Identify the car that emits the most CO2 emissions
max_co2 = filtered_df['CO2_emission'].max()
max_co2_car = filtered_df[filtered_df['CO2_emission'] == max_co2]

print("Car with the highest CO2 emissions:")
print(max_co2_car[['Make', 'CO2_emission']])

# Step 2: Analyze correlations between CO2 emissions and other numerical variables
numerical_columns = ['CO2_emission','Mass_in_running_kg','Wheel_base_mm',
                   'Axle_width_steering_axle_mm','Engine_capacity_cm3',
                   'Engine_power_kw']

# Ensure the numerical columns exist in the DataFrame
numerical_columns = [col for col in numerical_columns if col in filtered_df.columns]

# Step 3: Create a scatter plot matrix to visualize relationships between CO2 and other variables
sns.pairplot(filtered_df[numerical_columns])
plt.suptitle('Scatter Plot Matrix of CO2 and Related Variables', y=1.02)
plt.show()

# Create a heatmap to visualize the correlation matrix
correlation_matrix = filtered_df[numerical_columns].corr()

plt.figure(figsize=(14, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix with CO2 Emissions')
plt.show()

# Print the correlation matrix to identify the variables that correlate the most with CO2 emissions
print("Correlation matrix with CO2 emissions:")
print(correlation_matrix['CO2_emission'].sort_values(ascending=False))

# Reset the index of filtered_df to ensure unique index values
filtered_df = filtered_df.reset_index(drop=True)

# Step 3: Create a scatter plot matrix to visualize relationships between CO2 and other variables
sns.pairplot(filtered_df[numerical_columns])
plt.suptitle('Scatter Plot Matrix of CO2 and Related Variables', y=1.02)
plt.show()

#Axle_width_steering_axle_mm

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns

fig, axes = plt.subplots(nrows = 1, ncols = 2, figsize = (10,6))

sns.histplot(CO2_union['Axle_width_steering_axle_mm'], bins = 20, kde = True, ax =axes[0]);
axes[0].set_title('Axle_width_steering_axle_mm');
axes[0].set_xlabel('Axle_width_steering_axle_mm');
axes[0].set_ylabel('Distribution');


sns.boxplot(CO2_union['Axle_width_steering_axle_mm'], ax= axes[1]);
axes[1].set_title('Axle_width_steering_axle_mm');
axes[1].set_xlabel('Axle_width_steering_axle_mm');
axes[1].set_ylabel('Distribution');


plt.tight_layout();
plt.show();

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns

fig, axes = plt.subplots(nrows = 1, ncols = 2, figsize = (10,6))

sns.histplot(CO2_union['Engine_power_kw'], bins = 20, kde = True, ax =axes[0]);
axes[0].set_title('Engine Power');
axes[0].set_xlabel('Engine power kw');
axes[0].set_ylabel('Distribution');


sns.boxplot(CO2_union['Engine_power_kw'], ax= axes[1]);
axes[1].set_title('Engine Power');
axes[1].set_xlabel('Engine Power kw');
axes[1].set_ylabel('Distribution');


plt.tight_layout();
plt.show();

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns

fig, axes = plt.subplots(nrows = 1, ncols = 2, figsize = (10,6))

sns.histplot(CO2_union['Engine_capacity_cm3'], bins = 10, kde = True, ax =axes[0]);
axes[0].set_title('Engine capacity cm3');
axes[0].set_xlabel('Engine Capacity cm3');
axes[0].set_ylabel('Distribution');


sns.boxplot(CO2_union['Engine_capacity_cm3'], ax= axes[1]);
axes[1].set_title('Engine capacity cm3');
axes[1].set_xlabel('Engine capacity cm3');
axes[1].set_ylabel('Distribution');


plt.tight_layout();
plt.show();

#Top Polluters from the CO2 Dataset

filtered_df2 = CO2_union[['Member_state','Make','CO2_emission','Manufacturer_name_om']].dropna(subset=['CO2_emission'])

# Sort the data by CO2 emissions in descending order and take the top 20
top_cars = filtered_df2.sort_values(by='CO2_emission', ascending=False).head(20)

# Combine brand and commercial name for better labels

top_cars['Make'] = top_cars['Member_state'] + " " + top_cars['Manufacturer_name_om']


# Create a horizontal bar plot of CO2 emissions by car model
plt.figure(figsize=(12, 8))
plt.barh(top_cars['Make'], top_cars['CO2_emission'], color='skyblue')
plt.xlabel('CO2 Emissions (g/km)')
plt.ylabel('Car Model')
plt.title('Top 20 Cars with Highest CO2 Emissions')
plt.gca().invert_yaxis()  # Invert y-axis to have the highest CO2 emissions at the top

# Highlight the car with the highest CO2 emissions
max_co2 = top_cars['CO2_emission'].max()
max_co2_car = top_cars[top_cars['CO2_emission'] == max_co2]['Make'].values[0]
plt.barh(max_co2_car, max_co2, color='red')

# Show the plot
plt.tight_layout()
plt.show()

#CO2_union['CO2_emission'] = (CO2_union['CO2_emission']-CO2_union['CO2_emission'].min())/(CO2_union['CO2_emission'].max()-CO2_union['CO2_emission'].min())
#CO2_union['Engine_capacity_cm3'] = (CO2_union['Engine_capacity_cm3']-CO2_union['Engine_capacity_cm3'].min())/(CO2_union['Engine_capacity_cm3'].max()-CO2_union['Engine_capacity_cm3'].min())

scat = plt.scatter(CO2_union['CO2_emission'], CO2_union['Mass_in_running_kg'],
                   c = CO2_union['Engine_capacity_cm3'], cmap=plt.cm.rainbow,
                   s = CO2_union['Wheel_base_mm'], alpha = 0.4);

# Color scheme

plt.colorbar(scat, label = 'Mass in running Kg');
plt.rcParams['figure.dpi']= 120

plt.xlabel('CO2 emission');
plt.ylabel('Engine capacity cm3');

plt.legend(['Size : Wheel Base','Color : Mass in running KG'], loc = 'upper left')

plt.title('CO2_emission / Engine_capacity_cm3');
plt.grid(True);



"""#**Step 27:  Fill the CO2 rows with NaN**"""



CO2_union['CO2_emission'] = CO2_union['CO2_emission'].fillna(CO2_union['CO2_emission'].mode()) # mode, mean, median,min,max

"""#**Step 28: Emission Trend Analisis.**

# **Step 28: Applying pd.qcut to separate de CO2_emission data into Quartiles.**
"""



CO2_union['CO2_emission_cut'] = pd.qcut(CO2_union['CO2_emission'],3)


CO2_union.groupby(['CO2_emission_cut'], as_index=False)['CO2_emission'].mean()


# Other way to cut.
'''
test_gre = pd.cut(x = df['gre'],
                  bins = [200, 450, 550, 620, 800],
                  labels = ['bad', 'average', 'average +', 'good'])

pd.crosstab(df['admit'], test_gre)

# The more the GRE score is high, the more the candidate **seems** to have chances to be admitted.
# Indeed, the dominant admitted classes are "bon" and "moyen+"
test_gre
'''
'''
# We merge the two DataFrames using the merge method.
df = df.merge(test_gre, left_index=True, right_index=True)

# We delete the non-discretized column.
df = df.drop(columns='gre_x', axis = 1)

# We rename the discretized column.
df = df.rename({'gre_y' : 'gre'}, axis=1)

'''

# Creating the intervals, while we are going to stablish pollution levels.

CO2_union.loc[(CO2_union['CO2_emission']<=136),'CO2_emission']=1
CO2_union.loc[(CO2_union['CO2_emission']>136) & (CO2_union['CO2_emission']<=160) ,'CO2_emission']=2
CO2_union.loc[(CO2_union['CO2_emission']>160) & (CO2_union['CO2_emission']<=240) ,'CO2_emission']=3
CO2_union.loc[(CO2_union['CO2_emission']>240),'CO2_emission']=4

CO2_union['CO2_emission'].unique()

CO2_union['CO2_emission'] = CO2_union['CO2_emission'].fillna(CO2_union['CO2_emission'].median()) # mode, mean, median,min,max

CO2_union['CO2_emission'].unique()

CO2_union['Pol_Cat1'] = CO2_union.apply(lambda _: '', axis=1)
CO2_union['Pol_Cat2'] = CO2_union.apply(lambda _: '', axis=1)
CO2_union['Pol_Cat3'] = CO2_union.apply(lambda _: '', axis=1)
CO2_union['Pol_Cat4'] = CO2_union.apply(lambda _: '', axis=1)

CO2_union['Pol_Cat1'] = np.where(CO2_union['CO2_emission'] == 1, 1, CO2_union['Pol_Cat1'])
CO2_union['Pol_Cat2'] = np.where(CO2_union['CO2_emission'] == 2, 2, CO2_union['Pol_Cat2'])
CO2_union['Pol_Cat3'] = np.where(CO2_union['CO2_emission'] == 3, 3, CO2_union['Pol_Cat3'])
CO2_union['Pol_Cat4'] = np.where(CO2_union['CO2_emission'] == 4, 4, CO2_union['Pol_Cat4'])

Fields_Pol = ['Pol_Cat1','Pol_Cat2','Pol_Cat3','Pol_Cat4']

#CO2_union.groupby(['Member_state'], as_index=False)[Fields_Pol].sum()

CO2_union[Fields_Pol]

#(CO2_union.groupby(['Member_state','CO2_emission','year'], as_index=False).sum().groupby('year')['CO2_emission'].sum())


#CO2_union.groupby(['year', 'Member_state'])['CO2_emission'].agg(['sum', 'mean', 'count'])


#CO2_union.groupby(['year', 'Member_state'])['Total_new_registration'].sum()


#grouped = CO2_union.groupby(['year', 'Member_state','CO2_emission'])['CO2_emission'].agg(['sum']).reset_index()

member_polution = CO2_union.groupby(['Member_state'],as_index=False)['CO2_emission'].agg(['sum'])


member_polution.sort_values('sum',ascending=False).head(5)



auto_pollution = CO2_union.groupby(['Member_state','Make'], as_index=False)['CO2_emission'].sum()

auto_pollution.sort_values('CO2_emission',ascending=False)

pollution_levels = CO2_union.groupby(['Make','Pol_Cat1','Pol_Cat2','Pol_Cat3','Pol_Cat4'], as_index=False)['Pol_Cat4'].count()

pollution_levels.sort_values('Pol_Cat4',ascending=False)

pollution_levels_cars = CO2_union.groupby(['Make','Pol_Cat1','Pol_Cat2','Pol_Cat3','Pol_Cat4'], as_index=False)['CO2_emission'].sum()

pollution_levels_cars.sort_values('CO2_emission',ascending=False)



#CO2_union.describe(include = np.number)
CO2_union.info()

CO2_union['year'] = pd.to_datetime(CO2_union['year'])

# Count the number of cars produced each year
production_counts = CO2_union.groupby('year').size()

print("Number of cars produced each year:")
print(production_counts)

# Plot the production counts
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.plot(production_counts.index, production_counts.values, marker='o', linestyle='-', color='blue')
plt.xlabel('Year')
plt.ylabel('Number of Cars Produced')
plt.title('Number of Cars Produced Each Year (2010-2016)')
plt.grid(True)
plt.show()

# Group by Year and Model to get average CO2 emissions per model each year
yearly_emissions_model = CO2_union.groupby(['year', 'cn'])['e (g/km)'].mean().reset_index()

# Group by Year and Carrosserie (vehicle type) to get average CO2 emissions per type each year
yearly_emissions_type = CO2_union.groupby(['year', 'mk'])['e (g/km)'].mean().reset_index()

print(yearly_emissions_model.head())
print(yearly_emissions_type.head())

import matplotlib.pyplot as plt

# Get the top 5 models based on the combined data
top_models = CO2_union['cn'].value_counts().head(5).index.tolist()
print("Top models selected:", top_models)

# Filter the DataFrame for these top models
filtered_yearly_emissions = yearly_emissions_model[yearly_emissions_model['Model_file'].isin(top_models)]

# Plot the data
plt.figure(figsize=(14, 8))

for model in top_models:
    model_data = filtered_yearly_emissions[filtered_yearly_emissions['Model_file'] == model]
    plt.plot(model_data['Year'], model_data['CO2'], marker='o', label=model)

plt.xlabel('Year')
plt.ylabel('Average CO2 Emissions (g/km)')
plt.title('CO2 Emission Trends Over Time by Vehicle Model')
plt.legend(title='Vehicle Model')
plt.grid(True)
plt.show()







